#
# ~/.zshrc.tmpl - Managed by Chezmoi
#
# This file is a template and will be rendered by chezmoi apply
# Cross-platform support for macOS, Linux, and Windows (WSL)
#
# Generated for: {{ .chezmoi.os }}/{{ .chezmoi.arch }}
# Generated on: {{ now | date "2006-01-02 15:04:05" }}
#

# Enable Powerlevel10k instant prompt (if available)
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Path to your Oh My Zsh installation
export ZSH="$HOME/.oh-my-zsh"
export EDITOR="micro"

# Load Oh My Zsh
if [[ -f "$ZSH/oh-my-zsh.sh" ]]; then
  source "$ZSH/oh-my-zsh.sh"
fi

# Load Powerlevel10k theme (if available)
if [[ -f "$HOME/powerlevel10k/powerlevel10k.zsh-theme" ]]; then
  source "$HOME/powerlevel10k/powerlevel10k.zsh-theme"
fi

# Load Powerlevel10k config (if available)
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

#
# ----- Plugins -----
#
plugins=(
  git
  {{- if eq .chezmoi.os "darwin" }}
  macos
  brew
  {{- else if eq .chezmoi.os "linux" }}
  systemd
  {{- else if eq .chezmoi.os "windows" }}
  wsl
  {{- end }}
  zsh-completions
  zsh-autosuggestions
  zsh-syntax-highlighting
  zsh-history-substring-search
)

#
# ----- History Setup -----
#
HISTFILE="$HOME/.zhistory"
SAVEHIST=1000
HISTSIZE=999
setopt share_history
setopt hist_expire_dups_first
setopt hist_ignore_dups
setopt hist_verify

# History navigation with arrow keys
bindkey '^[[A' history-search-backward
bindkey '^[[B' history-search-forward

#
# ----- Platform-Specific Tool Configuration -----
#
{{- if eq .chezmoi.os "linux" }}
# Linux (Fedora/Ubuntu) - using fdfind and batcat
alias bat="batcat"
export FD_COMMAND="fdfind"
export BAT_COMMAND="batcat"
{{- else if eq .chezmoi.os "darwin" }}
# macOS - using fd and bat
export FD_COMMAND="fd"
export BAT_COMMAND="bat"
{{- else if eq .chezmoi.os "windows" }}
# Windows (WSL) - using fd.exe and bat.exe
export FD_COMMAND="fd.exe"
export BAT_COMMAND="bat.exe"
{{- end }}

#
# ----- FZF Setup -----
#
if command -v $FD_COMMAND &> /dev/null; then
  export FZF_DEFAULT_COMMAND="$FD_COMMAND --hidden --strip-cwd-prefix --exclude .git"
  export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
  export FZF_ALT_C_COMMAND="$FD_COMMAND --type=d --hidden --strip-cwd-prefix --exclude .git"
  
  _fzf_compgen_path() { $FD_COMMAND --hidden --exclude .git . "$1" }
  _fzf_compgen_dir() { $FD_COMMAND --type=d --hidden --exclude .git . "$1" }
fi

# Load FZF if available
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Load fzf-git.sh if available
[ -f ~/fzf-git.sh/fzf-git.sh ] && source ~/fzf-git.sh/fzf-git.sh

# FZF preview setup
if command -v eza &> /dev/null && command -v $BAT_COMMAND &> /dev/null; then
  show_file_or_dir_preview="if [ -d {} ]; then eza --tree --color=always {} | head -200; else $BAT_COMMAND -n --color=always --line-range :500 {}; fi"
  export FZF_CTRL_T_OPTS="--preview '$show_file_or_dir_preview'"
  export FZF_ALT_C_OPTS="--preview 'eza --tree --color=always {} | head -200'"
  
  _fzf_comprun() {
    local command=$1
    shift
    case "$command" in
      cd) fzf --preview 'eza --tree --color=always {} | head -200' "$@" ;;
      export|unset) fzf --preview "eval 'echo ${}'" "$@" ;;
      ssh) fzf --preview 'dig {}' "$@" ;;
      *) fzf --preview "$show_file_or_dir_preview" "$@" ;;
    esac
  }
fi

#
# ----- Aliases -----
#
# Eza (better ls) - only if available
if command -v eza &> /dev/null; then
  alias l="eza --icons=always"
  alias ls="eza --icons=always"
  alias ll="eza -lg --icons=always"
  alias la="eza -lag --icons=always"
  alias lt="eza -lTg --icons=always"
  alias lt2="eza -lTg --level=2 --icons=always"
  alias lt3="eza -lTg --level=3 --icons=always"
  alias lta="eza -lTag --icons=always"
  alias lta2="eza -lTag --level=2 --icons=always"
  alias lta3="eza -lTag --level=3 --icons=always"
fi

# Zoxide (better cd) - only if available
if command -v zoxide &> /dev/null; then
  eval "$(zoxide init zsh --cmd cd)"
fi

# Bat theme
export BAT_THEME=1337

# The Fuck - only if available
if command -v thefuck &> /dev/null; then
  eval $(thefuck --alias)
  eval $(thefuck --alias fk)
fi

# Add local bin to PATH
export PATH="$PATH:$HOME/.local/bin"

#
# ----- Platform-Specific Runtime Environments -----
#

# Conda initialization
{{- $condaPath := "" }}
{{- if eq .chezmoi.os "darwin" }}
  {{- $condaPath = "$HOME/miniconda" }}
{{- else }}
  {{- $condaPath = "$HOME/miniconda3" }}
{{- end }}

if [ -f "{{ $condaPath }}/bin/conda" ]; then
  __conda_setup="$({{ $condaPath }}/bin/conda 'shell.zsh' 'hook' 2> /dev/null)"
  if [ $? -eq 0 ]; then
    eval "$__conda_setup"
  else
    if [ -f "{{ $condaPath }}/etc/profile.d/conda.sh" ]; then
      . "{{ $condaPath }}/etc/profile.d/conda.sh"
    else
      export PATH="{{ $condaPath }}/bin:$PATH"
    fi
  fi
  unset __conda_setup
fi

# NVM (Node Version Manager)
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

{{- if eq .chezmoi.os "darwin" }}
# macOS-specific configurations

# Google Cloud SDK
if [ -f "$HOME/Downloads/google-cloud-sdk/path.zsh.inc" ]; then
  source "$HOME/Downloads/google-cloud-sdk/path.zsh.inc"
fi
if [ -f "$HOME/Downloads/google-cloud-sdk/completion.zsh.inc" ]; then
  source "$HOME/Downloads/google-cloud-sdk/completion.zsh.inc"
fi

# iTerm2 shell integration
if [[ -n $CURSOR_TRACE_ID ]]; then
  PROMPT_EOL_MARK=""
  test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"
  precmd() { print -Pn "\e]133;D;%?\a" }
  preexec() { print -Pn "\e]133;C;\a" }
fi

# Homebrew
if [[ -f "/opt/homebrew/bin/brew" ]]; then
  eval "$(/opt/homebrew/bin/brew shellenv)"
elif [[ -f "/usr/local/bin/brew" ]]; then
  eval "$(/usr/local/bin/brew shellenv)"
fi

{{- else if eq .chezmoi.os "linux" }}
# Linux-specific configurations

# Add snap to PATH if available
if [ -d "/snap/bin" ]; then
  export PATH="/snap/bin:$PATH"
fi

# Flatpak
if command -v flatpak &> /dev/null; then
  export XDG_DATA_DIRS="/var/lib/flatpak/exports/share:$HOME/.local/share/flatpak/exports/share:$XDG_DATA_DIRS"
fi

{{- else if eq .chezmoi.os "windows" }}
# Windows (WSL) specific configurations

# Windows PATH integration (if needed)
# export PATH="$PATH:/mnt/c/Windows/System32"

# WSL-specific aliases
alias explorer="explorer.exe"
alias code="code.exe"

{{- end }}

# Load any local customizations
[ -f ~/.zshrc.local ] && source ~/.zshrc.local